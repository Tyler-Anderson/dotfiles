(add-to-list 'load-path "~/.emacs.d/el-get/el-get")

(unless (require 'el-get nil t)
  (url-retrieve
   "https://github.com/dimitri/el-get/raw/master/el-get-install.el"
   (lambda (s)
     (end-of-buffer)
     (eval-print-last-sexp))))
(setq
 el-get-sources
 '(el-get))				; el-get is self-hosting

(setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
                         ("marmalade" . "http://marmalade-repo.org/packages/")
                         ("melpa" . "http://melpa.milkbox.net/packages/")))

(package-initialize)
(menu-bar-mode t)
(global-linum-mode 1)
(set-face-attribute 'default nil :font "inconsolata-16")
(add-to-list 'load-path "~/.emacs.d/themes/")
(add-to-list 'load-path "~/.emacs.d/custom/")


(let ((default-directory "~/.emacs.d/elpa/"))
  (setq load-path
        (append
         (let ((load-path (copy-sequence load-path))) ;; Shadow
           (append 
            (copy-sequence (normal-top-level-add-to-load-path '(".")))
            (normal-top-level-add-subdirs-to-load-path)))
         load-path)))


(require 'pallet)
(require 'color-theme)
(require 'desert-theme)
(require 'evil-leader)
(require 'evil)
(global-evil-leader-mode 1)
(evil-mode 1)
(evil-leader/set-leader ",")
(evil-leader/set-key
  "c" 'evilnc-comment-or-uncomment-lines
  "f" 'find-file-in-project
  "b" 'switch-to-buffer
  "z" 'toggle-maximize-buffer
  "nn" 'sr-speedbar-toggle
  )

;; make nrepl act like vimclojure
(evil-leader/set-key
  "ns" 'nrepl-set-ns
  "et" 'nrepl-eval-expression-at-point
  "sf" 'nrepl-load-current-buffer
  "S"  'paredit-splice-sexp
  "rn" 'nrepl-ritz-jack-in
  "N" 'nrepl-switch-to-repl-buffer)

;; vimclojure paredit controls
(evil-leader/set-key
  "W" 'paredit-wrap-sexp
  "w(" 'paredit-wrap-sexp
  "w[" 'paredit-wrap-square
  "w{" 'paredit-wrap-curly
  ">"  'paredit-forward-slurp-sexp
  "<"  'paredit-backward-barf-sexp
  "S"  'paredit-splice-sexp
  "J"  'paredit-join-sexps)

;; Scroll around windows 
(define-key evil-normal-state-map (kbd "C-j") 'windmove-down)
(define-key evil-normal-state-map (kbd "C-k") 'windmove-up)
(define-key evil-normal-state-map (kbd "C-h") 'windmove-left)
(define-key evil-normal-state-map (kbd "C-l") 'windmove-right)

(require 'clojure-mode)
(require 'nrepl)
(require 'ac-nrepl)

;; Configure nrepl.el
(setq nrepl-hide-special-buffers t)
(setq nrepl-popup-stacktraces-in-repl t)
(setq nrepl-history-file "~/.emacs.d/nrepl-history")
(require 'auto-complete-config)
(setenv "PATH" (concat "~/bin:" (getenv "PATH")))
(global-rainbow-delimiters-mode)
(define-key evil-normal-state-map (kbd "SPC") 'ace-jump-word-mode)
(define-key ac-completing-map [tab] 'ac-next)
(define-key ac-completing-map [S-tab] 'ac-previous)
(define-key ac-completing-map "\M-/" 'ac-stop) ; use M-/ to stop completion
(evil-make-intercept-map ac-completing-map) 
(auto-complete-mode)
;; Repl mode hook
;; Auto completion for NREPL
(add-hook 'nrepl-mode-hook 'ac-nrepl-setup)
(add-hook 'nrepl-interaction-mode-hook 'ac-nrepl-setup)
(add-hook 'clojure-mode-hook
          (lambda()
          (hl-line-mode -1)
          (global-hl-line-mode -1)
          (auto-complete-mode t)
          (evil-paredit-mode) 't))

(add-hook 'nrepl-mode-hook
     (lambda()
        (hl-line-mode -1)
        (global-hl-line-mode -1)) 't)
;(setq nrepl-tab-command 'indent-for-tab-command)
(eval-after-load "auto-complete"
  '(add-to-list 'ac-modes 'nrepl-mode))
(nrepl-enable-on-existing-clojure-buffers)
;(setq nrepl-popup-stacktraces nil)
(define-key nrepl-interaction-mode-map (kbd "C-c C-d") 'ac-nrepl-popup-doc)
(require 'evil-paredit)
(add-hook 'emacs-lisp-mode-hook
          (lambda() 
            (evil-paredit-mode)
            (hl-line-mode nil)
            (auto-complete-mode)))
(add-hook 'emacs-lisp-mode-hook 'auto-complete-mode)
(setq evil-normal-state-cursor 'hollow)
(setq evil-insert-state-cursor '("white" hbar))
(set-face-background 'ac-completion-face "darkgray")
(set-face-foreground 'ac-completion-face "white")
(set-face-background 'ac-candidate-face "gray14")
(set-face-foreground 'ac-candidate-face "red")
(require 'eyedropper)
(require 'hexrgb)
(require 'facemenu+)
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ac-nrepl-selection-face ((t (:background "dark red" :foreground "gray91"))))
 '(ac-selection-face ((t (:background "dark red" :foreground "gray91"))))
 '(font-lock-builtin-face ((t (:foreground "firebrick1"))))
 '(font-lock-comment-face ((t (:background "gray70" :foreground "Black"))))
 '(font-lock-function-name-face ((t (:foreground "LightSkyBlue1" :weight bold))))
 '(highlight ((t (:background "dark red" :foreground "gray96"))))
 '(isearch ((t (:background "gray87" :foreground "dark slate gray"))))
 '(rainbow-delimiters-depth-1-face ((t (:foreground "red2"))))
 '(rainbow-delimiters-depth-2-face ((t (:foreground "orange"))))
 '(rainbow-delimiters-depth-3-face ((t (:foreground "cornsilk1"))))
 '(rainbow-delimiters-depth-4-face ((t (:foreground "spring green"))))
 '(rainbow-delimiters-depth-5-face ((t (:foreground "plum1"))))
 '(rainbow-delimiters-depth-6-face ((t (:foreground "tan1"))))
 '(rainbow-delimiters-depth-7-face ((t (:foreground "light green"))))
 '(rainbow-delimiters-depth-9-face ((t (:foreground "yellow1"))))
 '(rainbow-delimiters-unmatched-face ((t (:foreground "white"))))
 '(region ((t (:background "dark blue" :foreground "gray100")))))
(add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
(global-hl-line-mode nil)
(setenv "PATH" (concat (getenv "PATH") ":/usr/local/bin"))
(setq exec-path (append exec-path '("/usr/local/bin")))
(exec-path-from-shell-initialize)
(hl-line-unload-function)
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
